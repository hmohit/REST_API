Commands for run/test

1) Go to the folder confluent

2) Install virtual environment. If doesn't exist you can install using (pip install --user virtualenv)
    virtualenv venv

3) Activate virtual environment
    source venv/bin/activate

4) Install dependencies
    pip install -r requirements.txt

5) cd feed

6) Start application server 
    gunicorn -w 4 feed.wsgi:application
       
7) Run the queries from the browser
    http://localhost:8000/feeder
    http://localhost:8000/feeder/subscribe_user_to_feed/?username=Mohit&feedname=b
    http://localhost:8000/feeder/unsubscribe_user_from_feed/?username=Mohit&feedname=b
    http://localhost:8000/feeder/get_user_feeds/?username=Mohit
    http://localhost:8000/feeder/add_article_to_feed/?feedname=t&article_id=1
    http://localhost:8000/feeder/get_user_articles/?username=Mohit

8) To test, open another shell and do 1, 3, 5
    python manage.py test feeder.tests


The initial data is already loaded using
    from feeder.data_init import load_data
    load_data()

Choices and Assumptions:
1) FrameWork:
    I choose to work with Django since I have worked on it before and hence I was somewhat 
    familiar with it. Also it is really fast to get it working on Django. In addition, 
    there is proper documentation available for it and it is widely used everywhere.

2) Database:
    I choose sqlite as it suited the needs of the project and also that it comes bundled 
    with django. So it is pretty fast to set it up.
    
    The username and feedname are directly used as keys instead of creating an id for them.
    This implies that they have to be unique. This would not be the case in the actual production
    web servies.

    There are three tables created.
    UserFeed:
    This stores the user and feed relations with feedname and username as the foreign keys. An id is created 
    as primary key since Django doesn't supposite composite keys. Otherwise (username, feedname) would be used as the primary key
    so as to search all the feeds for a user.

    FeedArticle:
    This stores the Feed Articles table. An id is used as the primary key for the same reason as above. Otherwise, (feedname, username)
    would have been used to search for all articles belonging to a feed.

    Article:
    This stores the article info:
    article_id : primary key
    title
    url 
    publisher

3) HTTP request:
    The API's are all called using the GET request to as:
    http://localhost:8000/feeder/subscribe_user_to_feed/?username=Mohit&feedname=b
    http://localhost:8000/feeder/unsubscribe_user_from_feed/?username=Mohit&feedname=b
    http://localhost:8000/feeder/get_user_feeds/?username=Mohit
    http://localhost:8000/feeder/add_article_to_feed/?feedname=t&article_id=1
    http://localhost:8000/feeder/get_user_articles/?username=Mohit

    Reasons/Assumptions for this are:
    1) we only need the ASCII characters
    2) the username/feedname etc would not be very long and hence would fit the URL length
    3) can easily be tested from the browser
    4) Non sensitive data

4) If the username/feedname/article-id doesn't exist in the tables then a error is returned.
    I went against adding it to the table if it doesn't exist, since it would pollute the tables 
    in case of a typo. Since there are no API for adding users, feeds and articles, these are prepopulated 
    using a data set from the internet for machine learning.
    
    The usernames are:
    ['Mohit', 'Matt', 'Sabrina', 'Sara', 'Priya', 'Confluent']

    The feeds are:
    ['b', 'e', 't', 'm']

    You can any of these to test it from the browser.

5) The tests are located in tests.py. You can run the tests by
    python manage.py test feeder.tests

6) Gunicorn is used as the application server since it is very easy to 
    setup with django. 4 worker threads are started to server concurrent requests.
    Load testing has not been done on the application 
    server in interest of time. 

7) The exceptions are catched as Exception which could be improved by
    catching specific exceptions.